<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" />
		<input name="normalMap" type="texture" address="wrap" />
		<input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" srgb="true" />
		<input name="blendMap" type="texture" address="wrap">materials/effects/mesh_effects/skulk_view_blood.dds</input>
		<input name="overlayMap" type="texture" address="wrap">models/misc/infestation/infestation.dds</input>
        <input name="hiddenAmount" type="float">0.0</input>
		<input name="glowIntensity" type="float">1.0</input>
		<input name="highlight" type="float">0.0</input>
		<input name="outline" type="float">0.0</input>

		<input name="skillSkinMap" type="texture" address="wrap" />
		<input name="skillColorR" type="float">0</input>
		<input name="skillColorG" type="float">0</input>
		<input name="skillColorB" type="float">0</input>
		<input name="skillColorChannel" type="float">0</input>
	</inputs>
	
	<params>
		<param name="alphaTest">true</param>
	</params>
	
	<code>
	<![CDATA[
		float paramQuick(float x, float p) {
			return pow(x,p);
		}
		
		float paramSlow(float x, float p) {
			return 1 - pow(abs(x),p);
		}
		
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
            return n.xyz;
		}

		float DecodeSkinMask(const float4 skinMap, float channel)
		{
			float mask;

			if (channel == 0.0)
				mask = 0.0;
			else if (channel == 1.0)
				mask = skinMap.r;
			else if (channel == 2.0)
				mask = skinMap.g;
			else if (channel == 3.0)
				mask = skinMap.b;

			return mask;
		}

		void MaterialShader(in Material_Input input, inout Material material)
		{
		
			float f             = 1 - hiddenAmount;
			float highlightId   = highlight;
			float param         = tex2D(blendMap, input.texCoord).a; // speading parameter
			float textureSpeed  = 2;
			float destroySpeed  = 2.5;
		
			float4 specularGloss = tex2D(specularMap, input.texCoord);
			material.tsNormal 	= DecodeNormal( tex2D(normalMap, input.texCoord) );			
			material.specular	= specularGloss.rgb;
			material.gloss		= specularGloss.a;
			
			float opacity       = paramSlow(param,destroySpeed);
			float blend         = paramQuick(param,textureSpeed);
			
// -- SkinSkill Shader --
			float3 albedoTex = tex2D( albedoMap, input.texCoord ).rgb;
			float3 skillColor = float3( skillColorR, skillColorG, skillColorB );
			float skillMask = DecodeSkinMask( tex2D(skillSkinMap, input.texCoord), skillColorChannel );

			if( skillMask > 0 ) {
				float3 grayAlbedoMap = dot( albedoTex, float3(0.299, 0.587, 0.114) ); //NTSC grey
				albedoTex = (1 - skillMask) * albedoTex.rgb + skillMask * skillColor.rgb;
			}
// -- SkinSkill Shader --

			// Blending
			if (blend + f > 1)
			{
				material.albedo = albedoTex;

			} else {
			    material.albedo = tex2D(overlayMap, input.texCoord * 4).rgb;
			}

			// Opacity
			material.opacity = opacity + f - 0.5;
			material.emissive   = tex2D(emissiveMap, input.texCoord).rgb * f * glowIntensity;
			
			material.id = 1*highlightId; // To make it show up on alien vision
			material.outline = outline;
		}
	]]>
	</code>

</shader>